# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.client.models.v1alpha3_device_claim import V1alpha3DeviceClaim

class TestV1alpha3DeviceClaim(unittest.TestCase):
    """V1alpha3DeviceClaim unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alpha3DeviceClaim:
        """Test V1alpha3DeviceClaim
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alpha3DeviceClaim`
        """
        model = V1alpha3DeviceClaim()
        if include_optional:
            return V1alpha3DeviceClaim(
                config = [
                    kubernetes.client.models.v1alpha3/device_claim_configuration.v1alpha3.DeviceClaimConfiguration(
                        opaque = kubernetes.client.models.v1alpha3/opaque_device_configuration.v1alpha3.OpaqueDeviceConfiguration(
                            driver = '', 
                            parameters = kubernetes.client.models.parameters.parameters(), ), 
                        requests = [
                            ''
                            ], )
                    ],
                constraints = [
                    kubernetes.client.models.v1alpha3/device_constraint.v1alpha3.DeviceConstraint(
                        match_attribute = '', 
                        requests = [
                            ''
                            ], )
                    ],
                requests = [
                    kubernetes.client.models.v1alpha3/device_request.v1alpha3.DeviceRequest(
                        admin_access = True, 
                        allocation_mode = '', 
                        count = 56, 
                        device_class_name = '', 
                        name = '', 
                        selectors = [
                            kubernetes.client.models.v1alpha3/device_selector.v1alpha3.DeviceSelector(
                                cel = kubernetes.client.models.v1alpha3/cel_device_selector.v1alpha3.CELDeviceSelector(
                                    expression = '', ), )
                            ], )
                    ]
            )
        else:
            return V1alpha3DeviceClaim(
        )
        """

    def testV1alpha3DeviceClaim(self):
        """Test V1alpha3DeviceClaim"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
