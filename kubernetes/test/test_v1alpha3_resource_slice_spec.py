# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.client.models.v1alpha3_resource_slice_spec import V1alpha3ResourceSliceSpec

class TestV1alpha3ResourceSliceSpec(unittest.TestCase):
    """V1alpha3ResourceSliceSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alpha3ResourceSliceSpec:
        """Test V1alpha3ResourceSliceSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alpha3ResourceSliceSpec`
        """
        model = V1alpha3ResourceSliceSpec()
        if include_optional:
            return V1alpha3ResourceSliceSpec(
                all_nodes = True,
                devices = [
                    kubernetes.client.models.v1alpha3/device.v1alpha3.Device(
                        basic = kubernetes.client.models.v1alpha3/basic_device.v1alpha3.BasicDevice(
                            attributes = {
                                'key' : kubernetes.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                                    bool = True, 
                                    int = 56, 
                                    string = '', 
                                    version = '', )
                                }, 
                            capacity = {
                                'key' : ''
                                }, ), 
                        name = '', )
                    ],
                driver = '',
                node_name = '',
                node_selector = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                    node_selector_terms = [
                        kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                            match_expressions = [
                                kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_fields = [
                                kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                    key = '', 
                                    operator = '', )
                                ], )
                        ], ),
                pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                    generation = 56, 
                    name = '', 
                    resource_slice_count = 56, )
            )
        else:
            return V1alpha3ResourceSliceSpec(
                driver = '',
                pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                    generation = 56, 
                    name = '', 
                    resource_slice_count = 56, ),
        )
        """

    def testV1alpha3ResourceSliceSpec(self):
        """Test V1alpha3ResourceSliceSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
