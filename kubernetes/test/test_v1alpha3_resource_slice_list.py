# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.client.models.v1alpha3_resource_slice_list import V1alpha3ResourceSliceList

class TestV1alpha3ResourceSliceList(unittest.TestCase):
    """V1alpha3ResourceSliceList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alpha3ResourceSliceList:
        """Test V1alpha3ResourceSliceList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alpha3ResourceSliceList`
        """
        model = V1alpha3ResourceSliceList()
        if include_optional:
            return V1alpha3ResourceSliceList(
                api_version = '',
                items = [
                    kubernetes.client.models.v1alpha3/resource_slice.v1alpha3.ResourceSlice(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes.client.models.v1alpha3/resource_slice_spec.v1alpha3.ResourceSliceSpec(
                            all_nodes = True, 
                            devices = [
                                kubernetes.client.models.v1alpha3/device.v1alpha3.Device(
                                    basic = kubernetes.client.models.v1alpha3/basic_device.v1alpha3.BasicDevice(
                                        attributes = {
                                            'key' : kubernetes.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                                                bool = True, 
                                                int = 56, 
                                                string = '', 
                                                version = '', )
                                            }, 
                                        capacity = {
                                            'key' : ''
                                            }, ), 
                                    name = '', )
                                ], 
                            driver = '', 
                            node_name = '', 
                            node_selector = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                                node_selector_terms = [
                                    kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                        match_expressions = [
                                            kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', 
                                                values = [
                                                    ''
                                                    ], )
                                            ], 
                                        match_fields = [
                                            kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', )
                                            ], )
                                    ], ), 
                            pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                                generation = 56, 
                                name = '', 
                                resource_slice_count = 56, ), ), )
                    ],
                kind = '',
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, 
                    resource_version = '', 
                    self_link = '', )
            )
        else:
            return V1alpha3ResourceSliceList(
                items = [
                    kubernetes.client.models.v1alpha3/resource_slice.v1alpha3.ResourceSlice(
                        api_version = '', 
                        kind = '', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = kubernetes.client.models.v1alpha3/resource_slice_spec.v1alpha3.ResourceSliceSpec(
                            all_nodes = True, 
                            devices = [
                                kubernetes.client.models.v1alpha3/device.v1alpha3.Device(
                                    basic = kubernetes.client.models.v1alpha3/basic_device.v1alpha3.BasicDevice(
                                        attributes = {
                                            'key' : kubernetes.client.models.v1alpha3/device_attribute.v1alpha3.DeviceAttribute(
                                                bool = True, 
                                                int = 56, 
                                                string = '', 
                                                version = '', )
                                            }, 
                                        capacity = {
                                            'key' : ''
                                            }, ), 
                                    name = '', )
                                ], 
                            driver = '', 
                            node_name = '', 
                            node_selector = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                                node_selector_terms = [
                                    kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                        match_expressions = [
                                            kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', 
                                                values = [
                                                    ''
                                                    ], )
                                            ], 
                                        match_fields = [
                                            kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', )
                                            ], )
                                    ], ), 
                            pool = kubernetes.client.models.v1alpha3/resource_pool.v1alpha3.ResourcePool(
                                generation = 56, 
                                name = '', 
                                resource_slice_count = 56, ), ), )
                    ],
        )
        """

    def testV1alpha3ResourceSliceList(self):
        """Test V1alpha3ResourceSliceList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
