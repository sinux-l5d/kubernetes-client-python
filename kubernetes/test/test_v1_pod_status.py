# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.client.models.v1_pod_status import V1PodStatus

class TestV1PodStatus(unittest.TestCase):
    """V1PodStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1PodStatus:
        """Test V1PodStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1PodStatus`
        """
        model = V1PodStatus()
        if include_optional:
            return V1PodStatus(
                conditions = [
                    kubernetes.client.models.v1/pod_condition.v1.PodCondition(
                        last_probe_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        reason = '', 
                        status = '', 
                        type = '', )
                    ],
                container_statuses = [
                    kubernetes.client.models.v1/container_status.v1.ContainerStatus(
                        allocated_resources = {
                            'key' : ''
                            }, 
                        allocated_resources_status = [
                            kubernetes.client.models.v1/resource_status.v1.ResourceStatus(
                                name = '', 
                                resources = [
                                    kubernetes.client.models.v1/resource_health.v1.ResourceHealth(
                                        health = '', 
                                        resource_id = '', )
                                    ], )
                            ], 
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        resources = kubernetes.client.models.v1/resource_requirements.v1.ResourceRequirements(
                            claims = [
                                kubernetes.client.models.v1/resource_claim.v1.ResourceClaim(
                                    name = '', 
                                    request = '', )
                                ], 
                            limits = {
                                'key' : ''
                                }, 
                            requests = {
                                'key' : ''
                                }, ), 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes.client.models.v1/container_state.v1.ContainerState(), 
                        user = kubernetes.client.models.v1/container_user.v1.ContainerUser(
                            linux = kubernetes.client.models.v1/linux_container_user.v1.LinuxContainerUser(
                                gid = 56, 
                                supplemental_groups = [
                                    56
                                    ], 
                                uid = 56, ), ), 
                        volume_mounts = [
                            kubernetes.client.models.v1/volume_mount_status.v1.VolumeMountStatus(
                                mount_path = '', 
                                name = '', 
                                read_only = True, 
                                recursive_read_only = '', )
                            ], )
                    ],
                ephemeral_container_statuses = [
                    kubernetes.client.models.v1/container_status.v1.ContainerStatus(
                        allocated_resources = {
                            'key' : ''
                            }, 
                        allocated_resources_status = [
                            kubernetes.client.models.v1/resource_status.v1.ResourceStatus(
                                name = '', 
                                resources = [
                                    kubernetes.client.models.v1/resource_health.v1.ResourceHealth(
                                        health = '', 
                                        resource_id = '', )
                                    ], )
                            ], 
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        resources = kubernetes.client.models.v1/resource_requirements.v1.ResourceRequirements(
                            claims = [
                                kubernetes.client.models.v1/resource_claim.v1.ResourceClaim(
                                    name = '', 
                                    request = '', )
                                ], 
                            limits = {
                                'key' : ''
                                }, 
                            requests = {
                                'key' : ''
                                }, ), 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes.client.models.v1/container_state.v1.ContainerState(), 
                        user = kubernetes.client.models.v1/container_user.v1.ContainerUser(
                            linux = kubernetes.client.models.v1/linux_container_user.v1.LinuxContainerUser(
                                gid = 56, 
                                supplemental_groups = [
                                    56
                                    ], 
                                uid = 56, ), ), 
                        volume_mounts = [
                            kubernetes.client.models.v1/volume_mount_status.v1.VolumeMountStatus(
                                mount_path = '', 
                                name = '', 
                                read_only = True, 
                                recursive_read_only = '', )
                            ], )
                    ],
                host_ip = '',
                host_ips = [
                    kubernetes.client.models.v1/host_ip.v1.HostIP(
                        ip = '', )
                    ],
                init_container_statuses = [
                    kubernetes.client.models.v1/container_status.v1.ContainerStatus(
                        allocated_resources = {
                            'key' : ''
                            }, 
                        allocated_resources_status = [
                            kubernetes.client.models.v1/resource_status.v1.ResourceStatus(
                                name = '', 
                                resources = [
                                    kubernetes.client.models.v1/resource_health.v1.ResourceHealth(
                                        health = '', 
                                        resource_id = '', )
                                    ], )
                            ], 
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = kubernetes.client.models.v1/container_state.v1.ContainerState(
                            running = kubernetes.client.models.v1/container_state_running.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = kubernetes.client.models.v1/container_state_terminated.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = kubernetes.client.models.v1/container_state_waiting.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        resources = kubernetes.client.models.v1/resource_requirements.v1.ResourceRequirements(
                            claims = [
                                kubernetes.client.models.v1/resource_claim.v1.ResourceClaim(
                                    name = '', 
                                    request = '', )
                                ], 
                            limits = {
                                'key' : ''
                                }, 
                            requests = {
                                'key' : ''
                                }, ), 
                        restart_count = 56, 
                        started = True, 
                        state = kubernetes.client.models.v1/container_state.v1.ContainerState(), 
                        user = kubernetes.client.models.v1/container_user.v1.ContainerUser(
                            linux = kubernetes.client.models.v1/linux_container_user.v1.LinuxContainerUser(
                                gid = 56, 
                                supplemental_groups = [
                                    56
                                    ], 
                                uid = 56, ), ), 
                        volume_mounts = [
                            kubernetes.client.models.v1/volume_mount_status.v1.VolumeMountStatus(
                                mount_path = '', 
                                name = '', 
                                read_only = True, 
                                recursive_read_only = '', )
                            ], )
                    ],
                message = '',
                nominated_node_name = '',
                phase = '',
                pod_ip = '',
                pod_ips = [
                    kubernetes.client.models.v1/pod_ip.v1.PodIP(
                        ip = '', )
                    ],
                qos_class = '',
                reason = '',
                resize = '',
                resource_claim_statuses = [
                    kubernetes.client.models.v1/pod_resource_claim_status.v1.PodResourceClaimStatus(
                        name = '', 
                        resource_claim_name = '', )
                    ],
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return V1PodStatus(
        )
        """

    def testV1PodStatus(self):
        """Test V1PodStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
