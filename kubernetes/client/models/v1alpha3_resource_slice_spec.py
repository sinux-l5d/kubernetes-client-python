# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubernetes.client.models.v1_node_selector import V1NodeSelector
from kubernetes.client.models.v1alpha3_device import V1alpha3Device
from kubernetes.client.models.v1alpha3_resource_pool import V1alpha3ResourcePool
from typing import Optional, Set
from typing_extensions import Self

class V1alpha3ResourceSliceSpec(BaseModel):
    """
    ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
    """ # noqa: E501
    all_nodes: Optional[StrictBool] = Field(default=None, description="AllNodes indicates that all nodes have access to the resources in the pool.  Exactly one of NodeName, NodeSelector and AllNodes must be set.", alias="allNodes")
    devices: Optional[List[V1alpha3Device]] = Field(default=None, description="Devices lists some or all of the devices in this pool.  Must not have more than 128 entries.")
    driver: StrictStr = Field(description="Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.  Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable.")
    node_name: Optional[StrictStr] = Field(default=None, description="NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.  This field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.  Exactly one of NodeName, NodeSelector and AllNodes must be set. This field is immutable.", alias="nodeName")
    node_selector: Optional[V1NodeSelector] = Field(default=None, alias="nodeSelector")
    pool: V1alpha3ResourcePool
    __properties: ClassVar[List[str]] = ["allNodes", "devices", "driver", "nodeName", "nodeSelector", "pool"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alpha3ResourceSliceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item_devices in self.devices:
                if _item_devices:
                    _items.append(_item_devices.to_dict())
            _dict['devices'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_selector
        if self.node_selector:
            _dict['nodeSelector'] = self.node_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool
        if self.pool:
            _dict['pool'] = self.pool.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alpha3ResourceSliceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allNodes": obj.get("allNodes"),
            "devices": [V1alpha3Device.from_dict(_item) for _item in obj["devices"]] if obj.get("devices") is not None else None,
            "driver": obj.get("driver"),
            "nodeName": obj.get("nodeName"),
            "nodeSelector": V1NodeSelector.from_dict(obj["nodeSelector"]) if obj.get("nodeSelector") is not None else None,
            "pool": V1alpha3ResourcePool.from_dict(obj["pool"]) if obj.get("pool") is not None else None
        })
        return _obj


